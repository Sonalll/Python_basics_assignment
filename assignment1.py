# -*- coding: utf-8 -*-
"""Assignment1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rzd_MnoEwVX1COFQN_UYmGbmyQVHh1aa
"""



"""# Python Basic Assignment
Q1)Explain the key features of Python that make it a popular choice for programming?
ans-The key features of python that make it a popular choice for programming are-
 1. Readability and Simplicity
Python places a strong emphasis on clean, readable code. Its syntax is designed to be highly readable, with minimal use of brackets and a clear layout using indentation and whitespace. By relying on indentation to define code blocks, Python enables developers to write code that is not only easy to write but also easy to read and understand.

Python’s simplicity and readability make it an ideal choice for both beginners and experienced developers. Beginners can grasp the basics of the language quickly, while experienced developers appreciate Python’s readability, which significantly reduces debugging time and enhances code maintainability.

2. Extensive Standard Library
Python comes with an extensive standard library, which is a collection of modules and packages that offer a wide range of functionalities. These modules and packages help simplify complex tasks by providing pre-built functionalities, saving developers time and effort.

Python’s standard library includes modules and packages for regular expressions, GUI programming, networking, data processing, and much more. This vast ecosystem ensures that developers have access to a wide array of tools without the need for external dependencies. It streamlines software development and ensures compatibility across different versions of Python.

By leveraging the functionalities provided by the standard library, developers can significantly boost their productivity and reduce development time.

3. Cross-Platform Compatibility
Python’s cross-platform compatibility allows it to run seamlessly on different operating systems such as Windows, macOS, and Linux. Developers can write their code once and deploy it on multiple platforms, saving time and effort in application development.

Cross-platform compatibility is crucial in modern software development, as it enables applications to reach a broader audience across various devices and operating systems. Python’s ability to run on multiple platforms makes it a versatile choice for developers who want to build applications that work everywhere.

4. Dynamic Typing and Dynamic Binding
Python is a dynamically-typed language, which means that the type of a variable is determined at runtime. Unlike statically-typed languages, such as C++ or Java, Python does not require explicit type declarations. This dynamic typing feature results in faster development time and increases code flexibility.

Dynamic binding, another key feature of Python, allows variables to be bound to different objects at runtime. This flexibility contributes to the creation of reusable code and reduces code redundancy. Developers can dynamically bind variables to different objects based on specific conditions or changing requirements, making their code more adaptable and agile.

5. Strong Community Support
Python enjoys a vibrant and supportive community of developers worldwide. This community provides various resources, including forums, online communities, and open-source projects. The Python community strongly believes in knowledge sharing and mutual support.

The active and friendly nature of the Python community makes it an ideal environment for both beginners and experienced developers. Beginners can seek guidance and assistance, while experienced developers can engage in discussions, share insights, and collaborate on open-source projects. The strong community support fosters learning, mentoring, and problem-solving, making Python a favorable choice for developers seeking growth and support.

6. Object-Oriented Programming (OOP) Capabilities
Python supports object-oriented programming (OOP) principles, such as encapsulation, inheritance, and polymorphism. OOP enables developers to organize their code into reusable and independent modules or components, making it easier to manage complex applications. Python’s syntax and standard library provide intuitive and convenient ways to implement OOP concepts.

In Python, developers can define classes, create objects, inherit properties and methods from parent classes, and utilize polymorphism to write more flexible and maintainable code. By leveraging Python’s OOP capabilities, developers can design modular and scalable applications with ease.

7. Wide Range of Libraries and Frameworks
Python boasts a vast ecosystem of third-party libraries and frameworks. These libraries and frameworks provide developers with access to pre-built code and functionalities, reducing development time and increasing productivity.

For web development, Python offers popular frameworks like Django and Flask, which simplify the process of building feature-rich web applications. In the field of data science, Python provides powerful libraries like NumPy and Pandas for data manipulation and analysis. When it comes to machine learning, Python offers libraries like TensorFlow and PyTorch, which enable developers to create and train machine learning models efficiently.

Python’s extensive range of libraries and frameworks empowers developers to specialize in their domains and build applications with a high degree of customization and functionality.

8. Versatility
Python’s versatility is one of its key strengths. It can be used for a wide range of applications, including web development, data analysis, machine learning, scripting, and more. This versatility allows developers to use a single language for diverse projects, simplifying their workflow and reducing the learning curve associated with switching between different languages.

Furthermore, using a single language like Python for different projects offers several benefits. It facilitates code reuse, eases maintenance, and simplifies debugging across various applications. Python’s versatility promotes efficiency and consistency in software development.

9. Read-Evaluate-Print Loop (REPL) Environment
Python offers an interactive shell or Read-Evaluate-Print Loop (REPL) environment, enabling developers to experiment with code snippets quickly. The REPL environment allows developers to execute code and immediately see the output, facilitating rapid prototyping and experimentation.

Python’s REPL environment plays a vital role in debugging and development, as it enables developers to test code snippets, assess results, and refine their code iteratively. This real-time feedback mechanism boosts productivity and accelerates the development process.

10. Community-Driven Updates and PEPs
Python’s continuous evolution is driven by its community and Python Enhancement Proposals (PEPs). PEPs are design documents that propose new features or modifications to the Python programming language. The community actively collaborates on PEPs, providing feedback, suggestions, and improvements.

The iterative nature of Python’s development, based on community feedback, ensures that it stays up-to-date with the latest software development trends, features, and tools. Recent updates in Python 2023 introduce new syntax features, improved module systems, and performance optimizations, among other enhancements. The community-driven updates maintain Python’s relevance and effectiveness in modern software development.

2)-Describe the role of predefined keywords in Python and provide examples of how they are used in a program?

ans- Keywords are predefined, reserved words used in Python programming that have special meanings to the compiler.

We cannot use a keyword as a variable name, function name, or any other identifier. They are used to define the syntax and structure of the Python language.
Example of how keywords are used in a program.-
True: and False Boolean values that are the result of comparison operations

If, elif, and else Control flow keywords used to create conditional statements

Except: Used with exceptions to specify what to do when an exception occurs

Finally: Used with exceptions to specify a block of code that will be executed regardless of whether an exception occurs.
etc,

Q3)-Compare and contrast mutable and immutable objects in Python with examples?

Mutable objects in Python are those that can be changed after they are created, like lists or dictionaries. Immutable objects, on the other hand, cannot be changed after they are created, such as strings, integers, or tuples.

Q4)- Discuss the different types of operators in Python and provide examples of how they are used?
1. Python Arithmetic Operators
Mathematical operations including addition, subtraction, multiplication, and division are commonly carried out using Python arithmetic operators.
They are compatible with integers, variables, and expressions.
In addition to the standard arithmetic operators, there are operators for modulus, exponentiation, and floor division.
Operator	Name	Example
+	Addition	10 + 20 = 30
-	Subtraction	20 – 10 = 10
*	Multiplication	10 * 20 = 200
/	Division	20 / 10 = 2
%	Modulus	22 % 10 = 2
**	Exponent	4**2 = 16
//	Floor Division	9//2 = 4
Example of Python Arithmetic Operators in Python Compiler
     
a = 21
b = 10
# Addition
print ("a + b : ", a + b)
# Subtraction
print ("a - b : ", a - b)
# Multiplication
print ("a * b : ", a * b)
# Division
print ("a / b : ", a / b)
# Modulus
print ("a % b : ", a % b)
# Exponent
print ("a ** b : ", a ** b)
# Floor Division
print ("a // b : ", a // b)

Output
a + b : 31
a - b : 11
a * b : 210
a / b : 2.1
a % b : 1
a ** b : 16679880978201
a // b : 2
Read More - Python Developer Salary

2. Python Comparison Operators
To compare two values, Python comparison operators are needed.
Based on the comparison, they produce a Boolean value (True or False).
Operator	Name	Example
==	Equal	4 == 5 is not true.
!=	Not Equal	4 != 5 is true.
>	Greater Than	4 > 5 is not true
<	Less Than	4 < 5 is true
>=	Greater than or Equal to	4 >= 5 is not true.
<=	Less than or Equal to	4 <= 5 is true.
Example of Python Comparison Operators
        
a = 4
b = 5
# Equal
print ("a == b : ", a == b)
# Not Equal
print ("a != b : ", a != b)
# Greater Than
print ("a > b : ", a > b)
# Less Than
print ("a < b : ", a < b)
# Greater Than or Equal to
print ("a >= b : ", a >= b)
# Less Than or Equal to
print ("a <= b : ", a <= b)

This code compares the values of python variables 'a' and 'b' and prints if they are equal, not equal, greater than, less than, more than or equal to, and less than or equal to each other.

Output
a == b : False
a != b : True
a > b : False
a < b : True
a >= b : False
a <= b : True

3. Python Assignment Operators
Python assignment operators are used to assign values to variables in Python.
The single equal symbol (=) is the most fundamental assignment operator.
It assigns the value on the operator's right side to the variable on the operator's left side.
Operator	Name	Example
=	Assignment Operator	a = 10
+=	Addition Assignment	a += 5 (Same as a = a + 5)
-=	Subtraction Assignment	a -= 5 (Same as a = a - 5)
*=	Multiplication Assignment	a *= 5 (Same as a = a * 5)
/=	Division Assignment	a /= 5 (Same as a = a / 5)
%=	Remainder Assignment	a %= 5 (Same as a = a % 5)
**=	Exponent Assignment	a **= 2 (Same as a = a ** 2)
//=	Floor Division Assignment	a //= 3 (Same as a = a // 3)
Example of Python Assignment Operators
        
# Assignment Operator
a = 10
# Addition Assignment
a += 5
print ("a += 5 : ", a)
# Subtraction Assignment
a -= 5
print ("a -= 5 : ", a)
# Multiplication Assignment
a *= 5
print ("a *= 5 : ", a)
# Division Assignment
a /= 5
print ("a /= 5 : ",a)
# Remainder Assignment
a %= 3
print ("a %= 3 : ", a)
# Exponent Assignment
a **= 2
print ("a **= 2 : ", a)
# Floor Division Assignment
a //= 3
print ("a //= 3 : ", a)

The Python assignment operators are shown in this code in the Python Editor. It begins with the value of 'a' equal to 10, and then goes through the steps of addition, subtraction, multiplication, division, remainder, exponentiation, and floor division, updating 'a' as necessary and outputting the results.

Output
a += 5 : 105
a -= 5 : 100
a *= 5 : 500
a /= 5 : 100.0
a %= 3 : 1.0
a **= 2 : 1.0
a //= 3 : 0.0

4. Python Bitwise Operators
Python bitwise operators execute operations on individual bits of binary integers.
They work with integer binary representations, performing logical operations on each bit location.
Python includes various bitwise operators, such as AND (&), OR (|), NOT (), XOR (), left shift (), and right shift (>>).
Operator	Name	Example
&	Binary AND	Sets each bit to 1 if both bits are 1
|	Binary OR	Sets each bit to 1 if one of the two bits is 1
^	Binary XOR	Sets each bit to 1 if only one of two bits is 1
~	Binary Ones Complement	Inverts all the bits
~	Binary Ones Complement	Inverts all the bits
<<	Binary Left Shift	Shift left by pushing zeros in from the right and let the leftmost bits fall off
>>	Binary Right Shift	Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off
Example of Python Bitwise Operators
        
a = 60 # 60 = 0011 1100
b = 13 # 13 = 0000 1101
# Binary AND
c = a & b # 12 = 0000 1100
print ("a & b : ", c)
# Binary OR
c = a | b # 61 = 0011 1101
print ("a | b : ", c)
# Binary XOR
c = a ^ b # 49 = 0011 0001
print ("a ^ b : ", c)
# Binary Ones Complement
c = ~a; # -61 = 1100 0011
print ("~a : ", c)
# Binary Left Shift
c = a << 2; # 240 = 1111 0000
print ("a << 2 : ", c)
# Binary Right Shift
c = a >> 2; # 15 = 0000 1111
print ("a >> 2 : ", c)

The binary representations of the numbers 'a and b' are subjected to bitwise operations in this code. It displays the results of binary AND, OR, XOR, Ones Complement, Left Shift, and Right Shift operations.

Output
a & b : 12
a | b : 61
a ^ b : 49
~a : -61
a >> 2 : 240
a >> 2 : 15

5. Python Logical Operators
Python logical operators are used to compose Boolean expressions and evaluate their truth values.
They are required for the creation of conditional statements as well as for managing the flow of execution in programs.
Python has three basic logical operators: AND, OR, and NOT.
Operator	Description	Example
and Logical AND	If both of the operands are true then the condition becomes true.	(a and b) is true.
or Logical OR	If any of the two operands is non-zero then the condition becomes true.	(a or b) is true.
not Logical NOT	Used to reverse the logical state of its operand	Not(a and b) is false.
Example of Python Logical Operators in Python Online Editor
          
x = 5
y = 10
if x > 3 and y < 15:
  print("Both x and y are within the specified range")

The code assigns the values 5 and 10 to variables x and y. It determines whether x is larger than 3 and y is less than 15. If both conditions are met, it writes "Both x and y are within the specified range."

Output
Both x and y are within the specified range
6. Python Membership Operators
Python membership operators are used to determine whether or not a certain value occurs within a sequence.
They make it simple to determine the membership of elements in various Python data structures such as lists, tuples, sets, and strings.
Python has two primary membership operators: the in and not in operators.
Operator	Description	Example
in	Evaluates to true if it finds a variable in the specified sequence and false otherwise.	x in y, here in results in a 1 if x is a member of sequence y.
not in	Evaluates to true if it does not find a variable in the specified sequence and false otherwise.	x not in y, here not in results in a 1 if x is not a member of sequence y.
Example of Python Membership Operators
        
fruits = ["apple", "banana", "cherry"]
if "banana" in fruits:
    print("Yes, banana is a fruit!")
else:
    print("No, banana is not a fruit!")

The code defines a list of fruits and tests to see if the word "banana" appears in the list. If it is, the message "Yes, banana is a fruit!" is displayed; otherwise, the message "No, banana is not a fruit!" is displayed.

Output
Yes, banana is a fruit!

7. Python Identity Operators
Python identity operators are used to compare two objects' memory addresses rather than their values.
If the two objects refer to the same memory address, they evaluate to True; otherwise, they evaluate to False.
Python includes two identity operators: the is and is not operators.
Operator	Description	Example
is	Evaluates to true if the variables on either side of the operator point to the same object and false otherwise	x is y, here are results in 1 if id(x) equals id(y)
is not	Evaluates to false if the variables on either side of the operator point to the same object and true otherwise	x is not y, there are no results in 1 if id(x) is not equal to id(y).
Example of Python Identity Operators
        
x = 10
y = 5
if x is y:
    print("x and y are the same object")
else:
    print("x and y are not the same object")

The code sets the variables x and y to 10 and 5, respectively. It then uses the is keyword to determine whether x and y relate to the same item in memory. If they are, it displays "x and y are the same object"; otherwise, it displays "x and y are not the same object."

Output
x and y are not the same object
Python Operators Precedence
Python Operator's Precedence can be explained by this given table,

Sr.No.	Operator	Description
1.	**	Exponentiation (raise to the power)
2.	~ + -	Complement, unary plus and minus (method names for the last two are +@ and -@)
3.	* / % //	Multiply, divide, modulo, and floor division
4.	+ -	Addition and subtraction
5.	>> <<	Right and left bitwise shift
6.	&	Bitwise 'AND'
7.	^ |	Bitwise exclusive `OR' and regular `OR'
8.	<= < > >=	Comparison operators
9.	<> == !=	Equality operators
10.	= %= /= //= -= += *= **=	Assignment operators
11.	is is not	Identity operators
12.	in not in	Membership operators
13.	not or and	Logical operators

Q5)Explain the concept of type casting in Python with examples?
ans-Type casting in Python refers to the process of converting a variable from one data type to another.This is particularly useful when performing operations that require compatible data types. Python supports two main types of casting: implicit and explicit.

Implicit Type Casting

Implicit type casting, also known as automatic type conversion, occurs when Python automatically converts one data type to another without explicit instruction from the user. This typically happens when operations involve different types of variables.

For example:

When performing arithmetic operations between an integer and a float, Python implicitly converts the integer to a float to maintain precision:

a = 10    # Integer

b = 5.5   # Float

result = a + b  # Result will be 15.5 (Float)


Explicit Type Casting

Explicit type casting requires the use of built-in functions to convert a variable from one type to another. The commonly used functions for explicit type casting in Python are:

int(): Converts a number or string to an integer.

float(): Converts a number or string to a float.

str(): Converts a number or any other type to a string.

Here are some examples:

Using int():

x = int(2.9)      # x will be 2

y = int("3")      # y will be 3

Using float():

x = float(3)      # x will be 3.0

y = float("4.2")  # y will be 4.2

Using str():

x = str(10)       # x will be '10'

y = str(3.5)      # y will be '3.5'

Q6)-How do conditional statements work in Python? Illustrate with examples?
ans- Conditional statements in Python allow programs to execute specific blocks of code based on certain conditions. These structures enable decision-making in a program, allowing it to react differently depending on variable states or user inputs. The core components of conditional statements in Python include if, elif, and else.

Basic Structure of Conditional Statements

In Python, an if statement is used to evaluate a condition, and if the condition is true, the associated block of code is executed. If the condition is false, the block is skipped.

An example of a simple if statement is as follows:

if condition:

    # code to execute if condition is true

The if Statement

The if statement checks a condition and executes the block if the condition evaluates to true. For example:

a = 10

b = 5

if a > b:

    print("a is greater than b")

In this example, since the condition a > b is true, the output will be:

a is greater than b

The if...else Statement

The if...else statement allows for two mutually exclusive alternatives. If the if condition is false, the code in the else block executes.

a = 5

b = 10

if a > b:

    print("a is greater than b")

else:

    print("b is greater than a")

As a is not greater than b, this will result in:

b is greater than a

The if...elif...else Statement

When there are multiple conditions to evaluate, elif (short for "else if") can be used. The structure allows checking subsequent conditions when the previous one is false.

a = 10

b = 15

if a > b:

    print("a is greater than b")

elif a < b:

    print("a is less than b")

else:

    print("a is equal to b")

In this case, since a is less than b, the output will be:

a is less than b

Nested If Statements

if statements can also be nested within one another to form more complex decision trees. For example:

num = 20

if num >= 0:

    print("Positive number")

    if num == 0:

        print("It is zero")

else:

    print("Negative number")


In this example, the nested if checks if num is zero after confirming it is positive.

Example of the Ternary Operator

Python provides a shorthand way to write conditional expressions known as the ternary operator. This allows an if...else condition to be executed in one line.

a = 10

b = 20

result = "a is greater" if a > b else "b is greater"

print(result)


This code will output:

b is greater

Q7)-Describe the different types of loops in Python and their use cases with examples.
Python supports several types of loops, specifically for loops, while loops, and nested loops. Each type has its specific syntax and use cases. Below is a detailed report describing the different types of loops in Python along with their examples.

1. For Loops

For loops in Python are used to iterate over a sequence (like a list, tuple, string, or dictionary) or any iterable object. The for loop allows you to execute a block of code multiple times, once for each item in the sequence.

1.1 Syntax

The basic syntax of a for loop is as follows:

```python

for variable in iterable:

    # execute code block

```

1.2 Use Cases

Iterating Over a List: For example, to print each item in a list:

```python

fruits = ["apple", "banana", "cherry"]

for fruit in fruits:

    print(fruit)

```

Using range(): You can also use for loops with the range() function to execute a block of code a specified number of times:

```python

for i in range(5):

    print(i)

```

2. While Loops

While loops are used when you want to repeat a block of code an indefinite number of times, as long as a specified condition is true.

2.1 Syntax

The syntax for a while loop is:

```python

while condition:

    # execute code block

```

2.2 Use Cases

Counting: For example, counting from 1 to 5:

```python

count = 1

while count <= 5:

    print(count)

    count += 1

```

User Input: A while loop can be used to continually prompt a user for input until they provide a valid response:

```python

user_input = ""

while user_input != "exit":

    user_input = input("Enter a command (or type 'exit' to quit): ")

```

3. Nested Loops

Nested loops refer to loops within another loop. The inner loop will be executed multiple times for each iteration of the outer loop.

3.1 Syntax

The basic syntax for nested loops is:

```python

for outer_var in outer_iterable:

    for inner_var in inner_iterable:

        # execute code block

```

3.2 Use Cases

Creating Multiplication Tables: For instance, to print a multiplication table:

```python

for i in range(1, 6):

    for j in range(1, 6):

        print(f"{i} x {j} = {i * j}")

```

Iterating Through Multi-Dimensional Arrays: Nested loops are often used with lists of lists.

```python

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

for row in matrix:

    for item in row:

        print(item)

```

4. Control Statements in Loops

Python also provides control statements that modify the flow of loops.

4.1 Break Statement

The break statement can be used to exit a loop prematurely.

```python

for i in range(10):

    if i == 5:

        break  # exits the loop when i is 5

    print(i)

```

4.2 Continue Statement

The continue statement skips the current iteration and moves to the next one.

```python

for i in range(10):

    if i % 2 == 0:

        continue  # skips even numbers

    print(i)

```
"""